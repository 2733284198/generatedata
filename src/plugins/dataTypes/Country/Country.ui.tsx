import * as React from 'react';
import Button from '@material-ui/core/Button';
import { DTOptionsProps } from '../../../../types/dataTypes';
import { countryList } from '../../../_plugins';
import { DialogActions, DialogContent, DialogTitle, SmallDialog } from '../../../components/dialogs';
import Dropdown from '../../../components/dropdown/Dropdown';
import fullCountryList from './fullCountryList';
import sharedStyles from '../../../styles/shared.scss';
import styles from './Country.scss';

export type CountrySource = 'all' | 'plugins';
export type CountryState = {
	source: CountrySource;
	selectedCountries: string[]; // gawd bloody knows the proper typings here
}

export const initialState: CountryState = {
	source: 'all',
	selectedCountries: []
};

// all English right now
const fullCountryListOptions = fullCountryList.map((countryName) => ({
	value: countryName,
	label: countryName
}));

const Dialog = ({ visible, data, id, onClose, countryI18n, onUpdateSource, onUpdateSelectedCountries, i18n }: any) => {
	const countryPluginOptions = countryList.map((countryName) => ({
		value: countryName,
		label: countryI18n[countryName].countryName
	}));

	const onSelectCountries = (countries: any) => {
		onUpdateSelectedCountries(countries.map(({ value }: any) => value));
	};

	const selected = data.selectedCountries.map((countryName: string) => {
		if (data.source === 'all') {
			return { value: countryName, label: countryName };
		} else {
			return {
				value: countryName,
				// label: countryI18n[countryName].countryName
			};
		}
	});

	return (
		<SmallDialog onClose={onClose} open={visible}>
			<DialogTitle onClose={onClose}>Select Countries</DialogTitle>
			<DialogContent dividers>
				<div>
					This limits what country names will be generated by this field.
				</div>

				<h3>Source</h3>

				<div className={styles.sourceBlock}>
					<Button onClick={() => onUpdateSource('all')} size="small" color="primary" variant="outlined"
						style={{ marginRight: 10 }}>
						<input
							type="radio"
							name={`${id}-source`}
							id={`${id}-source-all`}
							checked={data.source === 'all'}
							onChange={() => {}}
						/>
						<span>All Countries ({fullCountryList.length})</span>
					</Button>

					<Button onClick={() => onUpdateSource('plugins')} size="small" color="primary" variant="outlined">
						<input
							type="radio"
							name={`${id}-source`}
							id={`${id}-source-all`}
							checked={data.source === 'plugins'}
							onChange={() => {}}
						/>
						<span>Country plugins ({countryList.length})</span>
					</Button>
				</div>

				<div className={sharedStyles.tip}>
					Country plugins provide a richer data set for generating more realistic data. With this option
					selected you can map other fields like Region, City, Postal/Zip and Phone to this row, ensuring
					that each final row has a random region within the randomly selected country, a random city within
					the region - and so on.
				</div>

				<h3>Filter</h3>
				<p>
					This lets you filter the list of countries selected above.
				</p>

				<Dropdown
					isMulti
					closeMenuOnSelect={false}
					isClearable={true}
					defaultValue={selected}
					value={data.selectedCountries}
					onChange={(values: any) => onSelectCountries(values)}
					options={data.source === 'all' ? fullCountryListOptions : countryPluginOptions}
				/>
			</DialogContent>
			<DialogActions>
				<Button onClick={onClose} color="primary" variant="outlined">Close</Button>
			</DialogActions>
		</SmallDialog>
	);
};

export const Options = ({ i18n, coreI18n, countryI18n, id, data, onUpdate }: DTOptionsProps): JSX.Element => {
	const [dialogVisible, setDialogVisibility] = React.useState(false);
	const numSelected = data.selectedCountries.length;

	const onUpdateSource = (source: CountrySource) => {
		onUpdate({
			source,
			selectedCountries: [] // always reset the filter after the user changes the source
		});
	};

	const onUpdateSelectedCountries = (selectedCountries: string[]) => {
		onUpdate({
			...data,
			selectedCountries
		});
	};

	let label = '';
	if (data.source === 'all') {
		if (data.selectedCountries.length) {
			label = `<b>${numSelected}</b> countries`;
		} else {
			label = `All countries`;
		}
	} else {
		if (data.selectedCountries.length) {
			label = `<b>${numSelected}</b> country plugins`;
		} else {
			label = `All country plugins`;
		}
	}

	return (
		<div>
			<Button
				onClick={() => setDialogVisibility(true)}
				variant="outlined"
				color="primary"
				size="small">
				<span dangerouslySetInnerHTML={{ __html: label }} />
			</Button>
			<Dialog
				visible={dialogVisible}
				data={data}
				id={id}
				i18n={i18n}
				countryI18n={countryI18n}
				onUpdateSource={onUpdateSource}
				onUpdateSelectedCountries={onUpdateSelectedCountries}
				onClose={() => setDialogVisibility(false)}
			/>
		</div>
	);
};

export const Help = ({ i18n, data, onUpdate }: DTOptionsProps): JSX.Element => (
	<div />
);


/**
 * This function has two convenient side-effects:
 * 1. It runs on page load, so we don't need to do anything special.
 * 2. It also affects the hidden template, so we don't need to do anything special for Country
 *    Data Types that are selected in the future - they'll already have the appropriate DOM changes.
 */
// var _countryChange = function (msg) {
// 	if (msg.countries.length > 0) {
// 		$(".dtCountry_allCountries").removeAttr("disabled");
// 		$(".dtCountry_allCountriesLabel").removeClass("gdDisabled");
// 	} else {
// 		$(".dtCountry_allCountries").attr("disabled", "disabled").removeAttr("checked");
// 		$(".dtCountry_allCountriesLabel").addClass("gdDisabled");
// 	}
// };
