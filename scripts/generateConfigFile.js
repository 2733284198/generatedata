require = require('esm')(module); // allows us to read es6 files
const fs = require('fs');
const path = require('path');
const package = require('../package.json');
const configDefaults = require('../config/config.client.defaults');

let overrides = {};
const configFile = path.join(__dirname, '..', 'config', 'config.client.js');
if (fs.existsSync(configFile)) {
	overrides = require(configFile);
}

const completeConfigFile = {
	version: package.version,
	...configDefaults.default,
	...overrides
};

const createBuildFile = (filename, content) => {
	const buildFolder = path.join(__dirname, '..', 'build');
	if (!fs.existsSync(buildFolder)) {
		fs.mkdirSync(buildFolder, { recursive: true });
	}
	const file = path.join(__dirname, '..', 'build', filename);
	if (fs.existsSync(file)) {
		fs.unlinkSync(file);
	}
	fs.writeFileSync(file, content);
};

const getPlugins = (pluginType, blacklist, checkConfigFileExistence = true) => {
	const baseFolder = path.join(__dirname, '..', `/src/plugins/${pluginType}`);
	const folders = fs.readdirSync(baseFolder);

	return folders.filter((folder) => {
		if (blacklist.indexOf(folder) !== -1) {
			return false;
		}
		const bundle = `${baseFolder}/${folder}/bundle.ts`;
		const config = `${baseFolder}/${folder}/config.ts`;
		if (checkConfigFileExistence) {
			return fs.existsSync(bundle) && fs.existsSync(config);
		} else {
			return fs.existsSync(bundle);
		}
	});
};

const createPluginsListFile = () => {
	let content = `/*
* This file is autogenerated. Do not edit! 
* ----------------------------------------
* 
* This imports all the metadata for all plugins and includes that information as part of the core bundle. All actual
* plugin files are bundled separately and loaded on-demand. 
*/

`;

	const dataTypes = getPlugins('dataTypes', completeConfigFile.dataTypeBlacklist);
	dataTypes.forEach((folder) => {
		content += `import ${folder} from './plugins/dataTypes/${folder}/config';\n`;
	});
	content += `\nexport const dataTypes = {\n\t${dataTypes.join(',\n\t')}\n};\n`;
	content += '\nexport type DataTypeFolder = keyof typeof dataTypes;\n\n';

	const exportTypes = getPlugins('exportTypes', completeConfigFile.exportTypeBlacklist);
	exportTypes.forEach((folder) => {
		content += `import ${folder} from './plugins/exportTypes/${folder}/config';\n`;
	});
	content += `\nexport const exportTypes = {\n\t${exportTypes.join(',\n\t')}\n};\n`;
	content += '\nexport type ExportTypeFolder = keyof typeof exportTypes;\n\n';

	// currently there's no metadata we need for countries, so we just keep track of the names
	const countries = getPlugins('countries', completeConfigFile.countryBlacklist, false);
	content += `\nexport type CountryType = '${countries.join('\' | \'')}';\n`;

	const file = path.join(__dirname, '..', 'src/_plugins.tsx');
	if (fs.existsSync(file)) {
		fs.unlinkSync(file);
	}
	fs.writeFileSync(file, content);
};

createBuildFile('config.client.js', `export default ${JSON.stringify(completeConfigFile, null, '\t')};`);

createPluginsListFile();
